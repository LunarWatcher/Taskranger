Import("env")

from sys import platform

def checkSecure(context):
    """
    Checks whether secure_getenv is present or not
    """
    context.Message("Checking secure_getenv... ")

    secureProbe = """
    #define _GNU_SOURCE
    #include <stdlib.h>
    int main() {
        secure_getenv("fakeVar");
    }
    """

    compiled = context.TryCompile(secureProbe, ".cpp")

    context.Result("yes" if compiled else "no")
    return compiled

with env.configure() as config:
    config.test("CheckCXX")
    config.configureFilesystem()

    if platform != "win32":
        if config.test("CheckSecureGetEnv", callback=checkSecure):
            env.define("HAS_SECURE_GETENV")


sources = env.Glob("taskranger/input/*.cpp")
sources += env.Glob("taskranger/input/operators/*.cpp")
sources += env.Glob("taskranger/commands/*.cpp")
sources += env.Glob("taskranger/util/*.cpp")
sources += env.Glob("taskranger/data/*.cpp")
sources += env.Glob("taskranger/data/attributes/*.cpp")
sources += env.Glob("taskranger/config/*.cpp")

env.appendSourcePath("#src/")
env.appendSourcePath("#tabulate/include")

if "test" in BUILD_TARGETS:
    lib = env.Library("taskranger", sources)
else:
    sources += env.Glob("taskranger/*.cpp")
    # The executable is named after the program instead of a shorthand function in order to avoid collisions with other todo programs.
    # Shell aliases can be manually added if necessary.
    # python/SourceList.py contains the list of sources.
    # It's kept externally because it's also used in tests/SConscript
    exe = env.Program("taskranger", sources)
    Default(exe)
