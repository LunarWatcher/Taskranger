#  _____ _                         _               ___ ___               _      _
# |_   _| |_  ___    _ __  __ _ __| |_ ___ _ _    / __|_ _|   ___ __ _ _(_)_ __| |_
#   | | | ' \/ -_)  | '  \/ _` (_-<  _/ -_) '_|  | (__ | |   (_-</ _| '_| | '_ \  _|
#   |_| |_||_\___|  |_|_|_\__,_/__/\__\___|_|     \___|___|  /__/\__|_| |_| .__/\__|
#                                                                         |_|
#
# This file contains the master CI script. This is in charge of doing the CI testing
# against pull requests and pushed commits to the master branch.
# This also runs against several operating systems and compilers, but it doesn't do
# other major versions. This is mainly because installing additional compilers
# would end up taking more time than the build itself, and because there's relatively
# few compilers that actually supports C++17, and specifically some of the requirements
# for this project. This includes <filesystem>, but it's not just limited to that.
#
# This is very experimental, and will evolve whenever I figure out how I do shit.
# Build with confusion, <3, yaml, and that euphoria when shit finally starts
# to fucking work :D

# Defines a CI workflow
name: CI

# ... which is run when:
on:
  # ... something is pushed to one or more branches, or;
  push:
    branches: [ master, develop ]
  # ... a PR is made to one or more branches.
  pull_request:
    branches: [ master, develop ]

# When the trigger conditions are met, run the jobs
jobs:
  pre-commit:
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      # Set up python; requires for SCons and Conan
      - uses: actions/setup-python@v2
      - name: Run hooks
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main" | sudo tee -a /etc/apt/sources.list
          sudo apt update
          sudo apt install clang-format-10
          sudo ln -sf /usr/bin/clang-format-10 /usr/bin/clang-format
          python3 -m pip install -r requirements.txt
          pre-commit run --all-files
  build:
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    # Contains the build matrix, and yes, it's a bit of a clusterfuck
    strategy:
      matrix:
        # Config: contains the system setup.
        config:
          - g++-9-ubuntu
          - clang++-9-ubuntu
          - clang++-11-macos
          - msvc-bundled-windows

        include:
          # This contains the actual definition of usable stuff for each configuration.
          # This can also include packages in the future, if I can find out
          # how GH Actions "if" works. /shrug
          - config: g++-9-ubuntu
            os: ubuntu-latest
            compiler: g++-9
            ccompiler: gcc-9
            folder: gcc.posix
          - config: clang++-9-ubuntu
            os: ubuntu-latest
            compiler: clang++-9
            ccompiler: clang-9
            folder: clang.posix
          - config: clang++-11-macos
            os: macos-latest
            compiler: clang++
            ccompiler: clang
            folder: clang.darwin
          - config: msvc-bundled-windows
            os: windows-latest
            compiler: cl
            ccompiler: cl
            folder: msvc.win32
    # The OS to run on
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    # Set up python; requires for SCons and Conan
    - uses: actions/setup-python@v2
    - name: Set env
      if: matrix.os != 'windows-latest'
      # Both CXX and CC needs to be set
      run: |
        echo "::set-env name=CXX::${{ matrix.compiler }}"
        echo "::set-env name=CC::${{ matrix.ccompiler }}"
        ${{ matrix.compiler }} --version
    # Install conan

    - uses: LunarWatcher/install-conan@master
    # Install SCons
    - name: Install dependencies
      run: |
        python -m pip install scons
    - name: Dependencies part 2 (Windoze)
      if: matrix.os == 'windows-latest'

      run: |
        python -m pip install pywin32
        Get-ChildItem Env:Path
    - name: Build
      run: |
        scons -j 2
    - name: Build and run test
      # The test doesn't strictly have to be run separately, but as the test base grows,
      # I'd like to be able to separate test failure from build failure
      run: |
        scons test -j 2 debug=False
